<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Ding&#39;s Coding Forge</title>
    <link>https://dingyu.dev/en/</link>
    <description>Recent content on Ding&#39;s Coding Forge</description>
    <image>
      <title>Ding&#39;s Coding Forge</title>
      <url>https://dingyu.dev/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://dingyu.dev/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.144.0</generator>
    <language>en</language>
    <lastBuildDate>Fri, 28 Mar 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://dingyu.dev/en/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[EDA] Running a Local Kafka Cluster with SASL SCRAM Authentication (Docker Compose)</title>
      <link>https://dingyu.dev/en/posts/local-sasl-kafka/</link>
      <pubDate>Fri, 28 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://dingyu.dev/en/posts/local-sasl-kafka/</guid>
      <description>This post documents how to build a local Kafka cluster using Docker Compose that supports both SCRAM-SHA-256 and SCRAM-SHA-512 SASL authentication mechanisms, enabling secure, production-like testing for applications like event dispatchers—all without modifying code or relying on external infrastructure.</description>
    </item>
    <item>
      <title>[EDA] Kafka (MSK) Monitoring with Burrow Prometheus And Thanos</title>
      <link>https://dingyu.dev/en/posts/dance-with-burrow/</link>
      <pubDate>Fri, 21 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://dingyu.dev/en/posts/dance-with-burrow/</guid>
      <description>People often rely solely on basic Kafka metrics like Input/Output Bytes, missing crucial insights into their event-driven architecture. This post demonstrates how to set up comprehensive topic-level monitoring for Kafka (AWS MSK) using Burrow, Prometheus, and Thanos. By combining Burrow for accurate consumer lag tracking, Prometheus for metric collection, and Thanos for long-term data storage and high availability, you&amp;#39;ll achieve effective Kafka monitoring without the high costs and limitations of cloud-native solutions.</description>
    </item>
    <item>
      <title>[EDA] Schema Registry</title>
      <link>https://dingyu.dev/en/posts/schema-registry/</link>
      <pubDate>Mon, 24 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://dingyu.dev/en/posts/schema-registry/</guid>
      <description>People often underestimate the importance of documenting schemas before starting to code, especially when working with stream processing. In this post, I’ll explain why using a schema registry is essential and why designing schemas upfront is crucial before diving into coding.</description>
    </item>
    <item>
      <title>[Protocol] Exploring RPC... and GRPC in Depth</title>
      <link>https://dingyu.dev/en/posts/grpc/</link>
      <pubDate>Thu, 06 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://dingyu.dev/en/posts/grpc/</guid>
      <description>When we hear &amp;#34;RPC communication,&amp;#34; many (maybe just me?) might immediately think of Protocol Buffers over HTTP/2 — in other words, gRPC. But what is RPC really, and why is gRPC considered fast? And when should we use it?</description>
    </item>
    <item>
      <title>[Go] Go Convention</title>
      <link>https://dingyu.dev/en/posts/go-convention/</link>
      <pubDate>Sun, 12 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://dingyu.dev/en/posts/go-convention/</guid>
      <description>There aren’t many Go developers in Korea, and major IT companies using Go are as rare as unicorns. At my company, we have accumulated our own know-how over the years while developing with Go. Here, I’d like to suggest some key conventions that I believe are useful for maintaining services in the long run.</description>
    </item>
    <item>
      <title>[LGTM] Elasticsearch to Loki Migration Story</title>
      <link>https://dingyu.dev/en/posts/es-to-loki/</link>
      <pubDate>Sat, 04 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://dingyu.dev/en/posts/es-to-loki/</guid>
      <description>This article explores the transition from Elasticsearch to Loki for cost-efficient log management, highlighting key differences in storage, indexing, and query performance. It covers best practices for optimizing Loki&amp;#39;s labeling strategy, managing chunk storage, and handling high-cardinality data. Additionally, it provides a step-by-step guide to configuring Grafana dashboards for efficient log analysis, including Raw Logs, Error Logs, TPS (P50/P99), Log Distributions, and Table Views.</description>
    </item>
    <item>
      <title>[EDA] Flink Dynamic Job Case Study</title>
      <link>https://dingyu.dev/en/posts/flink-dynamic-job/</link>
      <pubDate>Fri, 06 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://dingyu.dev/en/posts/flink-dynamic-job/</guid>
      <description>This post explores dynamic rule-based stream processing using Apache Flink for real-time fraud detection. It covers key topics such as dynamic key partitioning, broadcast state for rule updates, and custom window processing to efficiently evaluate transactions without redeploying jobs. The implementation ensures low-latency fraud detection by minimizing shuffle overhead, dynamically applying grouping keys, and leveraging stateful processing. Additionally, it discusses event retention strategies, performance considerations, and architecture trade-offs for building a scalable, high-performance fraud detection system.</description>
    </item>
    <item>
      <title>[Go] Gophercon 2024 - Building Minimalistic Backend Microservice in Go</title>
      <link>https://dingyu.dev/en/posts/gopher-con-2024-minimalistic-go/</link>
      <pubDate>Tue, 05 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://dingyu.dev/en/posts/gopher-con-2024-minimalistic-go/</guid>
      <description>Say goodbye to unnecessary frameworks—it&amp;#39;s time to go back to the basics. This post demonstrates how to build minimalistic backend applications using pure vanilla Go.</description>
    </item>
    <item>
      <title>[Go] Gophercon 2024 - Go Project Guide from A to Z</title>
      <link>https://dingyu.dev/en/posts/gopher-con-2024-go-project-guide/</link>
      <pubDate>Tue, 05 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://dingyu.dev/en/posts/gopher-con-2024-go-project-guide/</guid>
      <description>How to structure projects in Go, a language without rigid frameworks like Spring. This post introduces practical patterns for feature-driven development and enterprise-level application design.</description>
    </item>
    <item>
      <title>[Go] Gophercon 2024 - Kubernetes Platform Programming</title>
      <link>https://dingyu.dev/en/posts/gopher-con-2024-kubernetes-programing/</link>
      <pubDate>Tue, 05 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://dingyu.dev/en/posts/gopher-con-2024-kubernetes-programing/</guid>
      <description>How to use the Kubernetes API with Go… and deploy applications using Operators</description>
    </item>
    <item>
      <title>[Go] Profiling Worker Pool vs. Async Processing</title>
      <link>https://dingyu.dev/en/posts/worker-pool-async/</link>
      <pubDate>Sun, 27 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://dingyu.dev/en/posts/worker-pool-async/</guid>
      <description>This post explores profiling and optimizing worker pools vs. asynchronous execution in Go using pprof. It analyzes the performance impact of concurrent HTTP requests, comparing sync worker pools (10 vs. 100 workers) and a single async worker in terms of throughput, CPU overhead, and memory allocation. Profiling results reveal that worker pools suffer from high concurrency overhead, while asynchronous execution significantly improves throughput with minimal memory cost. Additionally, the post discusses when to use worker pools vs. async processing, highlighting key trade-offs for IO-bound vs. CPU-bound tasks.</description>
    </item>
    <item>
      <title>[DX] Building a Slack Bot for Internal Coffee Chats</title>
      <link>https://dingyu.dev/en/posts/coffee-pal/</link>
      <pubDate>Sat, 26 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://dingyu.dev/en/posts/coffee-pal/</guid>
      <description>Developers often work alone, deeply diving into specific techniques. However, as members of a company, we need a space to discuss and brainstorm together. Inspired by the spirit of Ubuntu, I created my own Slack app Slack Bolt Coffee Chat, Coffee Pal</description>
    </item>
    <item>
      <title>[Go] Tuning GC with pprof</title>
      <link>https://dingyu.dev/en/posts/go-pprof-gc/</link>
      <pubDate>Fri, 13 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://dingyu.dev/en/posts/go-pprof-gc/</guid>
      <description>This post explores how to use pprof for profiling and optimizing Go applications, focusing on heap allocation, GC tuning, and performance bottleneck identification. It covers profiling setup with Gin, analyzing Flame Graphs and heap dumps, and optimizing memory allocations by addressing inefficient context usage and logging overhead. Additionally, it discusses GC tuning strategies (GOMEMLIMIT, GOGC) and best practices like pointer usage, slice capacity preallocation, and benchmarking techniques to improve application efficiency and reduce Stop-The-World (STW) latency.</description>
    </item>
    <item>
      <title>[Third-Party] Integrating Sentry in Go</title>
      <link>https://dingyu.dev/en/posts/sentry/</link>
      <pubDate>Wed, 11 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://dingyu.dev/en/posts/sentry/</guid>
      <description>This post explores how to effectively integrate Sentry into Go projects to enhance error tracking, performance monitoring, and issue management. It covers the importance of structured logging, setting up Sentry alerts, and implementing error capturing using Go&amp;#39;s pkg/errors for better stack trace visibility. Additionally, it introduces best practices such as singleton-based initialization, contextual error handling, and panic recovery middleware, ensuring stable and efficient service operations.</description>
    </item>
    <item>
      <title>[Infra] Zero-Downtime Kubernetes Deployment Guide</title>
      <link>https://dingyu.dev/en/posts/k8s-zero-downtime/</link>
      <pubDate>Fri, 16 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://dingyu.dev/en/posts/k8s-zero-downtime/</guid>
      <description>During our migration from IDC to EKS, we encountered numerous challenges—including security configurations, network settings, databases, and ultimately, application deployments. After each deployment, we frequently faced 502 and 504 errors without a clear solution. Since minimizing downtime was critical, I’ll share how we overcame these 502 and 504 issues.</description>
    </item>
    <item>
      <title>[Infra] AWS Well Architected</title>
      <link>https://dingyu.dev/en/posts/aws-well-architected/</link>
      <pubDate>Tue, 19 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://dingyu.dev/en/posts/aws-well-architected/</guid>
      <description>This post explores AWS Well-Architected Best Practices, covering key aspects such as operational excellence, security, reliability, performance efficiency, cost optimization, and sustainability. It provides insights into scalability strategies (scale-up vs. scale-out), infrastructure as code (IaC), database replication, and high availability architectures. Additionally, it discusses security best practices, monitoring strategies, and cost management techniques to build a resilient, efficient, and cost-effective AWS infrastructure.</description>
    </item>
    <item>
      <title>[DB] Redis Transaction</title>
      <link>https://dingyu.dev/en/posts/redis-transaction/</link>
      <pubDate>Wed, 31 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://dingyu.dev/en/posts/redis-transaction/</guid>
      <description>Unlike RDBMS, Redis doesn’t have a traditional transaction mechanism. It primarily operates as a single-threaded cache, but transactions can still be made atomic using TX pipelines or Lua scripts. This post focuses on comparing the pros and cons of Lua scripts vs. TX pipelines.</description>
    </item>
    <item>
      <title>[Python] FastAPI Convention</title>
      <link>https://dingyu.dev/en/posts/fastapi-convention/</link>
      <pubDate>Thu, 22 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://dingyu.dev/en/posts/fastapi-convention/</guid>
      <description>People tend to say FastAPI has no best practice. As a software developer working mainly in object-oriented languages, I propose a class-based FastAPI best practice.</description>
    </item>
    <item>
      <title>[Crawler] Recaptcha Solver</title>
      <link>https://dingyu.dev/en/posts/crawling-selenium-solver/</link>
      <pubDate>Wed, 29 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://dingyu.dev/en/posts/crawling-selenium-solver/</guid>
      <description>This post explores bypassing Google Recaptcha using Selenium and Chrome Extensions for automated web scraping and login automation. It covers setting up ChromeDriver, integrating the Buster Recaptcha Solver extension, and analyzing Recaptcha behavior using browser DevTools and network monitoring. The post also walks through developing a Recaptcha-solving bot in C# using Selenium, handling iframe navigation, token extraction, and retry mechanisms. Additionally, it discusses the limitations of automated Recaptcha solving, Google’s detection mechanisms, and the challenges of scaling such solutions.</description>
    </item>
  </channel>
</rss>

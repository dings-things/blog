<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Go on Ding&#39;s Coding Forge</title>
    <link>https://dingyu.dev/tags/go/</link>
    <description>Recent content in Go on Ding&#39;s Coding Forge</description>
    <image>
      <title>Ding&#39;s Coding Forge</title>
      <url>https://dingyu.dev/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://dingyu.dev/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.144.0</generator>
    <language>ko</language>
    <lastBuildDate>Sun, 12 Jan 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://dingyu.dev/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Go] Go Convention</title>
      <link>https://dingyu.dev/posts/go-convention/</link>
      <pubDate>Sun, 12 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://dingyu.dev/posts/go-convention/</guid>
      <description>There aren’t many Go developers in Korea, and major IT companies using Go are as rare as unicorns. At my company, we have accumulated our own know-how over the years while developing with Go. Here, I’d like to suggest some key conventions that I believe are useful for maintaining services in the long run.</description>
    </item>
    <item>
      <title>[Go] Gophercon 2024 - Building Minimalistic Backend Microservice in Go</title>
      <link>https://dingyu.dev/posts/gopher-con-2024-minimalistic-go/</link>
      <pubDate>Tue, 05 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://dingyu.dev/posts/gopher-con-2024-minimalistic-go/</guid>
      <description>불필요한 프레임워크는 이제 그만&amp;hellip; 튜닝의 끝은 순정일세~ 바닐라 Go를 통해 미니멀리스틱 App 개발하는 법</description>
    </item>
    <item>
      <title>[Go] Gophercon 2024 - 고언어 프로젝트 가이드 A-Z</title>
      <link>https://dingyu.dev/posts/gopher-con-2024-go-project-guide/</link>
      <pubDate>Tue, 05 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://dingyu.dev/posts/gopher-con-2024-go-project-guide/</guid>
      <description>Spring과 같이 규격화 되어 있지 않은 Go 언어에서 프로젝트를 구성하는 방법.. 피쳐 단위 개발 그리고 엔터프라이즈 App까지 설계에 대한 개략적인 사례를 소개함</description>
    </item>
    <item>
      <title>[Go] Gophercon 2024 - 쿠버네티스 플랫폼 프로그래밍</title>
      <link>https://dingyu.dev/posts/gopher-con-2024-kubernetes-programing/</link>
      <pubDate>Tue, 05 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://dingyu.dev/posts/gopher-con-2024-kubernetes-programing/</guid>
      <description>go 기반으로 k8s API를 사용하는 법&amp;hellip; 오퍼레이터로 배포하는 애플리케이션</description>
    </item>
    <item>
      <title>[Go] Worker Pool과 비동기 작업의 성능 프로파일링</title>
      <link>https://dingyu.dev/posts/worker-pool-async/</link>
      <pubDate>Sun, 27 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://dingyu.dev/posts/worker-pool-async/</guid>
      <description>This post explores profiling and optimizing worker pools vs. asynchronous execution in Go using pprof. It analyzes the performance impact of concurrent HTTP requests, comparing sync worker pools (10 vs. 100 workers) and a single async worker in terms of throughput, CPU overhead, and memory allocation. Profiling results reveal that worker pools suffer from high concurrency overhead, while asynchronous execution significantly improves throughput with minimal memory cost. Additionally, the post discusses when to use worker pools vs. async processing, highlighting key trade-offs for IO-bound vs. CPU-bound tasks.</description>
    </item>
    <item>
      <title>[Go] pprof로 GC 튜닝하기</title>
      <link>https://dingyu.dev/posts/go-pprof-gc/</link>
      <pubDate>Fri, 13 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://dingyu.dev/posts/go-pprof-gc/</guid>
      <description>This post explores how to use pprof for profiling and optimizing Go applications, focusing on heap allocation, GC tuning, and performance bottleneck identification. It covers profiling setup with Gin, analyzing Flame Graphs and heap dumps, and optimizing memory allocations by addressing inefficient context usage and logging overhead. Additionally, it discusses GC tuning strategies (GOMEMLIMIT, GOGC) and best practices like pointer usage, slice capacity preallocation, and benchmarking techniques to improve application efficiency and reduce Stop-The-World (STW) latency.</description>
    </item>
    <item>
      <title>[Third-Party] Sentry 연동</title>
      <link>https://dingyu.dev/posts/sentry/</link>
      <pubDate>Wed, 11 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://dingyu.dev/posts/sentry/</guid>
      <description>This post explores how to effectively integrate Sentry into Go projects to enhance error tracking, performance monitoring, and issue management. It covers the importance of structured logging, setting up Sentry alerts, and implementing error capturing using Go&amp;#39;s pkg/errors for better stack trace visibility. Additionally, it introduces best practices such as singleton-based initialization, contextual error handling, and panic recovery middleware, ensuring stable and efficient service operations.</description>
    </item>
  </channel>
</rss>
